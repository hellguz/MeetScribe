
# .env.sample
# Copy this file to .env and fill in your secrets.
# This sample is configured for the local Docker Compose setup.

# ===== App =====
# Generate a random secret key. You can use: python -c 'import secrets; print(secrets.token_hex(24))'
SECRET_KEY=replace_this_with_a_real_secret_key

# REQUIRED: Your OpenAI API key for transcription and summarization.
OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# Your GROQ API key for summarization.
GROQ_API_KEY=gsk_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# Set to true if you want to use cloud services for transcription and summarization.
# If you want to use local Whisper models instead of cloud services, set this to false.
RECOGNITION_IN_CLOUD=false

# ===== Whisper =====
# Model size for transcription. Options: tiny, base, small, medium, large, large-v3
# Larger models are more accurate but slower and use more memory. 'medium' is a good balance.
WHISPER_MODEL_SIZE=medium

# ===== Project URLs (Local Docker Setup) =====
# For local Docker, VITE_API_BASE_URL should be an empty string.
# This makes the frontend send API requests to the same host (e.g., /api/meetings),
# which are then proxied to the backend by the Nginx in the frontend container.
VITE_API_BASE_URL=

# The backend needs to know the frontend's origin for CORS.
# For the local Docker setup, this is the address of the frontend service.
FRONTEND_ORIGIN=http://localhost:4132

# ===== Project URLs (Production Example) =====
# In a production deployment where your API and frontend are on different domains,
# you would uncomment and set these to your public URLs.
# VITE_API_BASE_URL=https://api.your-domain.com
# FRONTEND_ORIGIN=https://app.your-domain.com

# ===== Performance Tuning =====
# Set the number of threads for OpenBLAS (used by Whisper's underlying libraries).
# Adjust based on your server's CPU cores. Default is 6.
OPENBLAS_NUM_THREADS=6

# === Celery / Redis ===
# These are the default values for the Docker Compose setup and should not be changed
# unless you are using a different Redis instance.
CELERY_BROKER_URL=redis://redis:6379/0
CELERY_RESULT_BACKEND=redis://redis:6379/0